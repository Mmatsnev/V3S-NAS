     1                                  ; new count bit routine
     2                                  ;	part of this code is origined from
     3                                  ;	new GOGO-no-coda (1999, 2000)
     4                                  ;	Copyright (C) 1999 shigeo
     5                                  ;	modified by Keiichi SAKAI
     6                                  
     7                                  %include "nasm.h"
     8                              <1> 
     9                              <1> ;	Copyright (C) 1999 URURI
    10                              <1> 
    11                              <1> ;	nasm�ѥޥ���
    12                              <1> ;	1999/08/21 ���
    13                              <1> ;	1999/10/10 ���Ĥ��ɲ�
    14                              <1> ;	1999/10/27 aout�б�
    15                              <1> ;	1999/11/07 pushf, popf ��NASM�ΥХ��б�
    16                              <1> ;	1999/12/02 for BCC ( Thanks to Miquel )
    17                              <1> 
    18                              <1> ; for Windows Visual C++        -> define WIN32
    19                              <1> ;             Borland or cygwin ->        WIN32 and COFF
    20                              <1> ; for FreeBSD 2.x               ->        AOUT
    21                              <1> ; for TownsOS                   ->        __tos__
    22                              <1> ; otherwise                     ->   none
    23                              <1> 
    24                              <1> ;̾����դ���
    25                              <1> 
    26                              <1> BITS 32
    27                              <1> 
    28                              <1> section .note.GNU-stack noalloc noexec nowrite progbits
    29                              <1> 
    30                              <1> %ifdef YASM
    31                              <1> 	%define segment_code segment .text align=16 use32
    32                              <1> 	%define segment_data segment .data align=16 use32
    33                              <1> 	%define segment_bss  segment .bss align=16 use32
    34                              <1> %elifdef WIN32
    35                              <1> 	%define segment_code segment .text align=16 class=CODE use32
    36                              <1> 	%define segment_data segment .data align=16 class=DATA use32
    37                              <1> %ifdef __BORLANDC__
    38                              <1> 	%define segment_bss  segment .data align=16 class=DATA use32
    39                              <1> %else
    40                              <1> 	%define segment_bss  segment .bss align=16 class=DATA use32
    41                              <1> %endif
    42                              <1> %elifdef AOUT
    43                              <1> 	%define _NAMING
    44                              <1> 	%define segment_code segment .text
    45                              <1> 	%define segment_data segment .data
    46                              <1> 	%define segment_bss  segment .bss
    47                              <1> %else
    48                              <1> %ifidn __OUTPUT_FORMAT__,elf
    49                              <1> 	section .note.GNU-stack progbits noalloc noexec nowrite align=1
    50                              <1> %endif
    51                              <1> 	%define segment_code segment .text align=16 class=CODE use32
    52                              <1> 	%define segment_data segment .data align=16 class=DATA use32
    53                              <1> 	%define segment_bss  segment .bss align=16 class=DATA use32
    54                              <1> %endif
    55                              <1> 
    56                              <1> %ifdef WIN32
    57                              <1> 	%define _NAMING
    58                              <1> %endif
    59                              <1> 
    60                              <1> %ifdef __tos__
    61                              <1> group CGROUP text
    62                              <1> group DGROUP data
    63                              <1> %endif
    64                              <1> 
    65                              <1> ;ñ�����ư��������
    66                              <1> 
    67                              <1> %idefine float dword
    68                              <1> %idefine fsize 4
    69                              <1> %idefine fsizen(a) (fsize*(a))
    70                              <1> 
    71                              <1> ;��ɷ��
    72                              <1> 
    73                              <1> %idefine wsize 2
    74                              <1> %idefine wsizen(a) (wsize*(a))
    75                              <1> %idefine dwsize 4
    76                              <1> %idefine dwsizen(a) (dwsize*(a))
    77                              <1> 
    78                              <1> ;REG
    79                              <1> 
    80                              <1> %define r0 eax
    81                              <1> %define r1 ebx
    82                              <1> %define r2 ecx
    83                              <1> %define r3 edx
    84                              <1> %define r4 esi
    85                              <1> %define r5 edi
    86                              <1> %define r6 ebp
    87                              <1> %define r7 esp
    88                              <1> 
    89                              <1> ;MMX,3DNow!,SSE
    90                              <1> 
    91                              <1> %define pmov	movq
    92                              <1> %define pmovd	movd
    93                              <1> 
    94                              <1> %define pupldq	punpckldq
    95                              <1> %define puphdq	punpckhdq
    96                              <1> %define puplwd	punpcklwd
    97                              <1> %define puphwd	punpckhwd
    98                              <1> 
    99                              <1> %define xm0 xmm0
   100                              <1> %define xm1 xmm1
   101                              <1> %define xm2 xmm2
   102                              <1> %define xm3 xmm3
   103                              <1> %define xm4 xmm4
   104                              <1> %define xm5 xmm5
   105                              <1> %define xm6 xmm6
   106                              <1> %define xm7 xmm7
   107                              <1> 
   108                              <1> ;�����åե��Ѥ�4�ʥޥ���
   109                              <1> 
   110                              <1> %define R4(a,b,c,d) (a*64+b*16+c*4+d)
   111                              <1> 
   112                              <1> ;C�饤���ʴʰץޥ���
   113                              <1> 
   114                              <1> %imacro globaldef 1
   115                              <1> 	%ifdef _NAMING
   116                              <1> 		%define %1 _%1
   117                              <1> 	%endif
   118                              <1> 	global %1
   119                              <1> %endmacro
   120                              <1> 
   121                              <1> %imacro externdef 1
   122                              <1> 	%ifdef _NAMING
   123                              <1> 		%define %1 _%1
   124                              <1> 	%endif
   125                              <1> 	extern %1
   126                              <1> %endmacro
   127                              <1> 
   128                              <1> %imacro proc 1
   129                              <1> 	%push	proc
   130                              <1> 	%ifdef _NAMING
   131                              <1> 		global _%1
   132                              <1> 	%else
   133                              <1> 		global %1
   134                              <1> 	%endif
   135                              <1> 
   136                              <1> 	align 32
   137                              <1> %1:
   138                              <1> _%1:
   139                              <1> 
   140                              <1> 	%assign %$STACK 0
   141                              <1> 	%assign %$STACKN 0
   142                              <1> 	%assign %$ARG 4
   143                              <1> %endmacro
   144                              <1> 
   145                              <1> %imacro endproc 0
   146                              <1> 	%ifnctx proc
   147                              <1> 		%error expected 'proc' before 'endproc'.
   148                              <1> 	%else
   149                              <1> 		%if %$STACK > 0
   150                              <1> 			add esp, %$STACK
   151                              <1> 		%endif
   152                              <1> 
   153                              <1> 		%if %$STACK <> (-%$STACKN)
   154                              <1> 			%error STACKLEVEL mismatch check 'local', 'alloc', 'pushd', 'popd'
   155                              <1> 		%endif
   156                              <1> 
   157                              <1> 		ret
   158                              <1> 		%pop
   159                              <1> 	%endif
   160                              <1> %endmacro
   161                              <1> 
   162                              <1> %idefine sp(a) esp+%$STACK+a
   163                              <1> 
   164                              <1> %imacro arg 1
   165                              <1> 	%00	equ %$ARG
   166                              <1> 	%assign %$ARG %$ARG+%1
   167                              <1> %endmacro
   168                              <1> 
   169                              <1> %imacro local 1
   170                              <1> 	%assign %$STACKN %$STACKN-%1
   171                              <1> 	%00 equ %$STACKN
   172                              <1> %endmacro
   173                              <1> 
   174                              <1> %imacro alloc 0
   175                              <1> 	sub esp, (-%$STACKN)-%$STACK
   176                              <1> 	%assign %$STACK (-%$STACKN)
   177                              <1> %endmacro
   178                              <1> 
   179                              <1> %imacro pushd 1-*
   180                              <1> 	%rep %0
   181                              <1> 		push %1
   182                              <1> 		%assign %$STACK %$STACK+4
   183                              <1> 	%rotate 1
   184                              <1> 	%endrep
   185                              <1> %endmacro
   186                              <1> 
   187                              <1> %imacro popd 1-*
   188                              <1> 	%rep %0
   189                              <1> 	%rotate -1
   190                              <1> 		pop %1
   191                              <1> 		%assign %$STACK %$STACK-4
   192                              <1> 	%endrep
   193                              <1> %endmacro
   194                              <1> 
   195                              <1> ; bug of NASM-0.98
   196                              <1> %define pushf db 0x66, 0x9C
   197                              <1> %define popf  db 0x66, 0x9D
   198                              <1> 
   199                              <1> %define	ge16(n)		((((n) / 16)*0xFFFFFFFF) & 0xFFFFFFFF)
   200                              <1> %define	ge15(n)		((((n) / 15)*0xFFFFFFFF) & 0xFFFFFFFF)
   201                              <1> %define	ge14(n)		((((n) / 14)*0xFFFFFFFF) & 0xFFFFFFFF)
   202                              <1> %define	ge13(n)		((((n) / 13)*0xFFFFFFFF) & 0xFFFFFFFF)
   203                              <1> %define	ge12(n)		((((n) / 12)*0xFFFFFFFF) & 0xFFFFFFFF)
   204                              <1> %define	ge11(n)		((((n) / 11)*0xFFFFFFFF) & 0xFFFFFFFF)
   205                              <1> %define	ge10(n)		((((n) / 10)*0xFFFFFFFF) & 0xFFFFFFFF)
   206                              <1> %define	ge9(n)		((((n) /  9)*0xFFFFFFFF) & 0xFFFFFFFF)
   207                              <1> %define	ge8(n)		(ge9(n) | ((((n) /  8)*0xFFFFFFFF) & 0xFFFFFFFF))
   208                              <1> %define	ge7(n)		(ge9(n) | ((((n) /  7)*0xFFFFFFFF) & 0xFFFFFFFF))
   209                              <1> %define	ge6(n)		(ge9(n) | ((((n) /  6)*0xFFFFFFFF) & 0xFFFFFFFF))
   210                              <1> %define	ge5(n)		(ge9(n) | ((((n) /  5)*0xFFFFFFFF) & 0xFFFFFFFF))
   211                              <1> %define	ge4(n)		(ge5(n) | ((((n) /  4)*0xFFFFFFFF) & 0xFFFFFFFF))
   212                              <1> %define	ge3(n)		(ge5(n) | ((((n) /  3)*0xFFFFFFFF) & 0xFFFFFFFF))
   213                              <1> %define	ge2(n)		(ge3(n) | ((((n) /  2)*0xFFFFFFFF) & 0xFFFFFFFF))
   214                              <1> %define	ge1(n)		(ge2(n) | ((((n) /  1)*0xFFFFFFFF) & 0xFFFFFFFF))
   215                              <1> 
   216                              <1> ; macro to align for begining of loop
   217                              <1> ; %1   does not align if it LE bytes to next alignment 
   218                              <1> ;      4..16 
   219                              <1> ;      default is 12
   220                              <1> 
   221                              <1> %imacro	loopalignK6	0-1 12 
   222                              <1> %%here:
   223                              <1> 	times (($$-%%here) & 15 & ge1(($$-%%here) & 15) & ~ge4(($$-%%here) & 15)) nop
   224                              <1> 	times (1                & ge4(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) jmp short %%skip
   225                              <1> 	times (((($$-%%here) & 15)-2) & ge4(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) nop
   226                              <1> %%skip:
   227                              <1> %endmacro
   228                              <1> 
   229                              <1> %imacro	loopalignK7	0-1 12 
   230                              <1> %%here:
   231                              <1> 	times (1 & ge1(($$-%%here) & 15)  & ~ge2(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) nop
   232                              <1> 	times (1 & ge2(($$-%%here) & 15)  & ~ge3(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Bh,0C0h
   233                              <1> 	times (1 & ge3(($$-%%here) & 15)  & ~ge4(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,020h
   234                              <1> 	times (1 & ge4(($$-%%here) & 15)  & ~ge5(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h
   235                              <1> 	times (1 & ge5(($$-%%here) & 15)  & ~ge6(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h,090h
   236                              <1> 	times (1 & ge6(($$-%%here) & 15)  & ~ge7(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,080h,0,0,0,0
   237                              <1> 	times (1 & ge7(($$-%%here) & 15)  & ~ge8(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0
   238                              <1> 	times (1 & ge8(($$-%%here) & 15)  & ~ge9(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0,90h
   239                              <1> 	times (1 & ge9(($$-%%here) & 15)  & ~ge10(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,007h,90h,90h,90h,90h,90h,90h,90h
   240                              <1> 	times (1 & ge10(($$-%%here) & 15) & ~ge11(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,008h,90h,90h,90h,90h,90h,90h,90h,90h
   241                              <1> 	times (1 & ge11(($$-%%here) & 15) & ~ge12(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,009h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   242                              <1> 	times (1 & ge12(($$-%%here) & 15) & ~ge13(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ah,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   243                              <1> 	times (1 & ge13(($$-%%here) & 15) & ~ge14(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Bh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   244                              <1> 	times (1 & ge14(($$-%%here) & 15) & ~ge15(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ch,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   245                              <1> 	times (1 & ge15(($$-%%here) & 15) & ~ge16(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Dh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h
   246                              <1> %%skip:
   247                              <1> %endmacro
   248                              <1> 
   249                              <1> %imacro	loopalign	0-1 12 
   250                              <1> 	loopalignK7 %1
   251                              <1> %endmacro
   252                              <1> %define PACK(x,y,z,w)	(x*64+y*16+z*4+w)
   253                              <1> 
   254                              <1> %ifidn __OUTPUT_FORMAT__,elf
   255                              <1> 
   256                              <1> %idefine PIC_BASE(A) _GLOBAL_OFFSET_TABLE_ + $$ - $ wrt ..gotpc
   257                              <1> %idefine PIC_EBP_REL(A) ebp + A wrt ..gotoff
   258                              <1> %macro PIC_OFFSETTABLE 0
   259                              <1> extern  _GLOBAL_OFFSET_TABLE_
   260                              <1> get_pc.bp:
   261                              <1> 	mov ebp, [esp]
   262                              <1> 	retn
   263                              <1> %endmacro
   264                              <1> 
   265                              <1> %else
   266                              <1> 
   267                              <1> %define PIC_BASE(A) (0)
   268                              <1> %define PIC_EBP_REL(A) (A)
   269                              <1> %macro PIC_OFFSETTABLE 0
   270                              <1> get_pc.bp:
   271                              <1> 	mov ebp, [esp]
   272                              <1> 	retn
   273                              <1> %endmacro
   274                              <1> 
   275                              <1> %endif
   276                                  
   277                                  	globaldef	choose_table_MMX
   278                              <1>  %ifdef _NAMING
   279                              <1>  %define %1 _%1
   280                              <1>  %endif
   281                              <1>  global %1
   282                                  	globaldef	MMX_masking
   283                              <1>  %ifdef _NAMING
   284                              <1>  %define %1 _%1
   285                              <1>  %endif
   286                              <1>  global %1
   287                                  
   288                                  	externdef	largetbl
   289                              <1>  %ifdef _NAMING
   290                              <1>  %define %1 _%1
   291                              <1>  %endif
   292                              <1>  extern %1
   293                                  	externdef	t1l
   294                              <1>  %ifdef _NAMING
   295                              <1>  %define %1 _%1
   296                              <1>  %endif
   297                              <1>  extern %1
   298                                  	externdef	table23
   299                              <1>  %ifdef _NAMING
   300                              <1>  %define %1 _%1
   301                              <1>  %endif
   302                              <1>  extern %1
   303                                  	externdef	table56
   304                              <1>  %ifdef _NAMING
   305                              <1>  %define %1 _%1
   306                              <1>  %endif
   307                              <1>  extern %1
   308                                  
   309                                  	segment_data
   310                                  	align	16
   311 00000000 0E000E000E000E00        D14_14_14_14	dd	0x000E000E, 0x000E000E
   312 00000008 F0FFF0FFF0FFF0FF        D15_15_15_15	dd	0xfff0fff0, 0xfff0fff0
   313 00000010 1000010010000100        mul_add		dd	0x00010010, 0x00010010
   314 00000018 0300010003000100        mul_add23	dd	0x00010003, 0x00010003
   315 00000020 0400010004000100        mul_add56	dd	0x00010004, 0x00010004
   316                                  tableDEF
   317 00000028 030001000100000005-     	dd	0x00010003,0x01,0x00050005,0x05,0x00070006,0x07,0x00090008,0x08,0x000a0008, 0x09
   318 00000031 000500050000000600-
   319 0000003A 070007000000080009-
   320 00000043 000800000008000A00-
   321 0000004C 09000000           
   322 00000050 09000A000A0000000A-     	dd	0x000a0009,0x0a,0x000b000a,0x0a,0x000b000a,0x0b,0x000c000a,0x0a,0x000c000b, 0x0b
   323 00000059 000B000A0000000A00-
   324 00000062 0B000B0000000A000C-
   325 0000006B 000A0000000B000C00-
   326 00000074 0B000000           
   327 00000078 0B000C000C0000000C-     	dd	0x000c000b,0x0c,0x000d000c,0x0c,0x000d000c,0x0d,0x000d000c,0x0d,0x000e000d, 0x0e
   328 00000081 000D000C0000000C00-
   329 0000008A 0D000D0000000C000D-
   330 00000093 000D0000000D000E00-
   331 0000009C 0E000000           
   332 000000A0 0E000B000E00000005-     	dd	0x000b000e,0x0e,0x00040005,0x04,0x00060005,0x06,0x00080007,0x08,0x00090008, 0x09
   333 000000A9 000400040000000500-
   334 000000B2 060006000000070008-
   335 000000BB 000800000008000900-
   336 000000C4 09000000           
   337 000000C8 09000A000A00000009-     	dd	0x000a0009,0x0a,0x000b0009,0x0a,0x000b000a,0x0b,0x000b000a,0x0b,0x000c000a, 0x0b
   338 000000D1 000B000A0000000A00-
   339 000000DA 0B000B0000000A000B-
   340 000000E3 000B0000000A000C00-
   341 000000EC 0B000000           
   342 000000F0 0B000C000B0000000B-     	dd	0x000c000b,0x0b,0x000c000b,0x0c,0x000d000c,0x0c,0x000e000c,0x0d,0x000d000c, 0x0e
   343 000000F9 000C000C0000000C00-
   344 00000102 0D000C0000000C000E-
   345 0000010B 000D0000000C000D00-
   346 00000114 0E000000           
   347 00000118 0D000E000E0000000D-     	dd	0x000e000d,0x0e,0x000b000d,0x0e,0x00070006,0x07,0x00080007,0x08,0x00090007, 0x09
   348 00000121 000B000E0000000600-
   349 0000012A 070007000000070008-
   350 00000133 000800000007000900-
   351 0000013C 09000000           
   352 00000140 08000A000A00000009-     	dd	0x000a0008,0x0a,0x000b0009,0x0b,0x000b0009,0x0b,0x000c000a,0x0c,0x000c000a, 0x0c
   353 00000149 000B000B0000000900-
   354 00000152 0B000B0000000A000C-
   355 0000015B 000C0000000A000C00-
   356 00000164 0C000000           
   357 00000168 0A000D000B0000000B-     	dd	0x000d000a,0x0b,0x000c000b,0x0c,0x000d000b,0x0c,0x000d000c,0x0d,0x000d000c, 0x0d
   358 00000171 000C000C0000000B00-
   359 0000017A 0D000C0000000C000D-
   360 00000183 000D0000000C000D00-
   361 0000018C 0D000000           
   362 00000190 0D000E000E0000000D-     	dd	0x000e000d,0x0e,0x000e000d,0x0f,0x000c000d,0x0f,0x00090007,0x08,0x00090008, 0x09
   363 00000199 000E000F0000000D00-
   364 000001A2 0C000F000000070009-
   365 000001AB 000800000008000900-
   366 000001B4 09000000           
   367 000001B8 08000A000A00000009-     	dd	0x000a0008,0x0a,0x000b0009,0x0b,0x000b0009,0x0b,0x000c000a,0x0c,0x000c000a, 0x0c
   368 000001C1 000B000B0000000900-
   369 000001CA 0B000B0000000A000C-
   370 000001D3 000C0000000A000C00-
   371 000001DC 0C000000           
   372 000001E0 0B000C000C0000000B-     	dd	0x000c000b,0x0c,0x000d000b,0x0c,0x000d000b,0x0d,0x000e000c,0x0d,0x000e000c, 0x0d
   373 000001E9 000D000C0000000B00-
   374 000001F2 0D000D0000000C000E-
   375 000001FB 000D0000000C000E00-
   376 00000204 0D000000           
   377 00000208 0C000E000D0000000D-     	dd	0x000e000c,0x0d,0x000f000d,0x0e,0x000f000d,0x0f,0x000d000d,0x0f,0x000a0008, 0x09
   378 00000211 000F000E0000000D00-
   379 0000021A 0F000F0000000D000D-
   380 00000223 000F00000008000A00-
   381 0000022C 09000000           
   382 00000230 08000A000900000009-     	dd	0x000a0008,0x09,0x000b0009,0x0b,0x000b0009,0x0b,0x000c000a,0x0c,0x000c000a, 0x0c
   383 00000239 000B000B0000000900-
   384 00000242 0B000B0000000A000C-
   385 0000024B 000C0000000A000C00-
   386 00000254 0C000000           
   387 00000258 0B000D000D0000000B-     	dd	0x000d000b,0x0d,0x000d000b,0x0d,0x000d000b,0x0c,0x000e000b,0x0d,0x000e000c, 0x0d
   388 00000261 000D000D0000000B00-
   389 0000026A 0D000C0000000B000E-
   390 00000273 000D0000000C000E00-
   391 0000027C 0D000000           
   392 00000280 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000f000c,0x0e,0x000f000d,0x0f,0x000f000d,0x0f,0x000c000d, 0x10
   393 00000289 000F000E0000000D00-
   394 00000292 0F000F0000000D000F-
   395 0000029B 000F0000000D000C00-
   396 000002A4 10000000           
   397 000002A8 09000A000A00000009-     	dd	0x000a0009,0x0a,0x000a0009,0x0a,0x000b0009,0x0b,0x000b000a,0x0c,0x000c000a, 0x0c
   398 000002B1 000A000A0000000900-
   399 000002BA 0B000B0000000A000B-
   400 000002C3 000C0000000A000C00-
   401 000002CC 0C000000           
   402 000002D0 0A000D000C0000000B-     	dd	0x000d000a,0x0c,0x000d000b,0x0d,0x000e000b,0x0d,0x000d000b,0x0d,0x000e000b, 0x0d
   403 000002D9 000D000D0000000B00-
   404 000002E2 0E000D0000000B000D-
   405 000002EB 000D0000000B000E00-
   406 000002F4 0D000000           
   407 000002F8 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000f000c,0x0d,0x000f000d,0x0f,0x000f000d,0x0f,0x0010000d, 0x10
   408 00000301 000F000D0000000D00-
   409 0000030A 0F000F0000000D000F-
   410 00000313 000F0000000D001000-
   411 0000031C 10000000           
   412 00000320 0E000D00100000000A-     	dd	0x000d000e,0x10,0x000b000a,0x0a,0x000b0009,0x0b,0x000b000a,0x0c,0x000c000a, 0x0c
   413 00000329 000B000A0000000900-
   414 00000332 0B000B0000000A000B-
   415 0000033B 000C0000000A000C00-
   416 00000344 0C000000           
   417 00000348 0A000D000D0000000B-     	dd	0x000d000a,0x0d,0x000d000b,0x0d,0x000d000b,0x0d,0x000d000b,0x0d,0x000e000b, 0x0d
   418 00000351 000D000D0000000B00-
   419 0000035A 0D000D0000000B000D-
   420 00000363 000D0000000B000E00-
   421 0000036C 0D000000           
   422 00000370 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000e000c,0x0e,0x000e000c,0x0e,0x000f000d,0x0f,0x000f000d, 0x0f
   423 00000379 000E000E0000000C00-
   424 00000382 0E000E0000000D000F-
   425 0000038B 000F0000000D000F00-
   426 00000394 0F000000           
   427 00000398 0E001000100000000E-     	dd	0x0010000e,0x10,0x000d000e,0x10,0x000b000a,0x0b,0x000b000a,0x0b,0x000c000a, 0x0c
   428 000003A1 000D00100000000A00-
   429 000003AA 0B000B0000000A000B-
   430 000003B3 000B0000000A000C00-
   431 000003BC 0C000000           
   432 000003C0 0B000C000D0000000B-     	dd	0x000c000b,0x0d,0x000d000b,0x0d,0x000d000b,0x0d,0x000d000b,0x0e,0x000e000c, 0x0e
   433 000003C9 000D000D0000000B00-
   434 000003D2 0D000D0000000B000D-
   435 000003DB 000E0000000C000E00-
   436 000003E4 0E000000           
   437 000003E8 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000f000c,0x0e,0x000f000c,0x0f,0x000f000c,0x0f,0x000f000d, 0x0f
   438 000003F1 000F000E0000000C00-
   439 000003FA 0F000F0000000C000F-
   440 00000403 000F0000000D000F00-
   441 0000040C 0F000000           
   442 00000410 0D001100100000000D-     	dd	0x0011000d,0x10,0x0011000d,0x12,0x000d000e,0x12,0x000b000a,0x0a,0x000c000a, 0x0a
   443 00000419 001100120000000E00-
   444 00000422 0D00120000000A000B-
   445 0000042B 000A0000000A000C00-
   446 00000434 0A000000           
   447 00000438 0A000C000B0000000B-     	dd	0x000c000a,0x0b,0x000d000b,0x0c,0x000d000b,0x0c,0x000d000b,0x0d,0x000e000b, 0x0d
   448 00000441 000D000C0000000B00-
   449 0000044A 0D000C0000000B000D-
   450 00000453 000D0000000B000E00-
   451 0000045C 0D000000           
   452 00000460 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000f000c,0x0e,0x000f000c,0x0e,0x000f000c,0x0e,0x000f000d, 0x0f
   453 00000469 000F000E0000000C00-
   454 00000472 0F000E0000000C000F-
   455 0000047B 000E0000000D000F00-
   456 00000484 0F000000           
   457 00000488 0D0010000F0000000E-     	dd	0x0010000d,0x0f,0x0010000e,0x10,0x0010000e,0x11,0x000d000e,0x11,0x000c000a, 0x0b
   458 00000491 001000100000000E00-
   459 0000049A 1000110000000E000D-
   460 000004A3 00110000000A000C00-
   461 000004AC 0B000000           
   462 000004B0 0A000C000B0000000B-     	dd	0x000c000a,0x0b,0x000c000b,0x0c,0x000d000b,0x0c,0x000d000b,0x0d,0x000e000b, 0x0d
   463 000004B9 000C000C0000000B00-
   464 000004C2 0D000C0000000B000D-
   465 000004CB 000D0000000B000E00-
   466 000004D4 0D000000           
   467 000004D8 0C000E000D0000000C-     	dd	0x000e000c,0x0d,0x000f000c,0x0f,0x000f000c,0x0e,0x000f000d,0x0f,0x000f000d, 0x0f
   468 000004E1 000F000F0000000C00-
   469 000004EA 0F000E0000000D000F-
   470 000004F3 000F0000000D000F00-
   471 000004FC 0F000000           
   472 00000500 0D001000100000000D-     	dd	0x0010000d,0x10,0x000f000d,0x10,0x0010000e,0x10,0x000f000e,0x12,0x000e000e, 0x11
   473 00000509 000F00100000000E00-
   474 00000512 1000100000000E000F-
   475 0000051B 00120000000E000E00-
   476 00000524 11000000           
   477 00000528 0B000C000B0000000B-     	dd	0x000c000b,0x0b,0x000d000b,0x0c,0x000c000b,0x0c,0x000d000b,0x0d,0x000e000c, 0x0d
   478 00000531 000D000C0000000B00-
   479 0000053A 0C000C0000000B000D-
   480 00000543 000D0000000C000E00-
   481 0000054C 0D000000           
   482 00000550 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000e000c,0x0e,0x000e000c,0x0f,0x000f000c,0x0e,0x0010000d, 0x0f
   483 00000559 000E000E0000000C00-
   484 00000562 0E000F0000000C000F-
   485 0000056B 000E0000000D001000-
   486 00000574 0F000000           
   487 00000578 0D001000100000000D-     	dd	0x0010000d,0x10,0x0010000d,0x0f,0x0011000d,0x10,0x0011000e,0x11,0x0010000f, 0x12
   488 00000581 0010000F0000000D00-
   489 0000058A 1100100000000E0011-
   490 00000593 00110000000F001000-
   491 0000059C 12000000           
   492 000005A0 0E000D00130000000B-     	dd	0x000d000e,0x13,0x000d000b,0x0c,0x000d000b,0x0c,0x000d000b,0x0c,0x000d000b, 0x0d
   493 000005A9 000D000C0000000B00-
   494 000005B2 0D000C0000000B000D-
   495 000005BB 000C0000000B000D00-
   496 000005C4 0D000000           
   497 000005C8 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000e000c,0x0e,0x000f000c,0x0e,0x0010000c,0x0e,0x0010000d, 0x0f
   498 000005D1 000E000E0000000C00-
   499 000005DA 0F000E0000000C0010-
   500 000005E3 000E0000000D001000-
   501 000005EC 0F000000           
   502 000005F0 0D0010000F0000000D-     	dd	0x0010000d,0x0f,0x0010000d,0x0f,0x0010000d,0x10,0x0010000e,0x11,0x000f000e, 0x11
   503 000005F9 0010000F0000000D00-
   504 00000602 1000100000000E0010-
   505 0000060B 00110000000E000F00-
   506 00000614 11000000           
   507 00000618 0E001000110000000F-     	dd	0x0010000e,0x11,0x000e000f,0x12,0x000d000c,0x0c,0x000e000c,0x0d,0x000e000b, 0x0d
   508 00000621 000E00120000000C00-
   509 0000062A 0D000C0000000C000E-
   510 00000633 000D0000000B000E00-
   511 0000063C 0D000000           
   512 00000640 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000e000c,0x0e,0x000f000c,0x0f,0x000f000d,0x0e,0x000f000d, 0x0f
   513 00000649 000E000E0000000C00-
   514 00000652 0F000F0000000D000F-
   515 0000065B 000E0000000D000F00-
   516 00000664 0F000000           
   517 00000668 0D000F00100000000D-     	dd	0x000f000d,0x10,0x0011000d,0x10,0x0010000d,0x11,0x0010000d,0x11,0x0010000e, 0x11
   518 00000671 001100100000000D00-
   519 0000067A 1000110000000D0010-
   520 00000683 00110000000E001000-
   521 0000068C 11000000           
   522 00000690 0E001000120000000F-     	dd	0x0010000e,0x12,0x0012000f,0x12,0x000e000f,0x12,0x000f000c,0x0d,0x000e000c, 0x0d
   523 00000699 001200120000000F00-
   524 000006A2 0E00120000000C000F-
   525 000006AB 000D0000000C000E00-
   526 000006B4 0D000000           
   527 000006B8 0C000E000E0000000C-     	dd	0x000e000c,0x0e,0x000e000c,0x0f,0x000f000c,0x0f,0x000f000d,0x0f,0x0010000d, 0x10
   528 000006C1 000E000F0000000C00-
   529 000006CA 0F000F0000000D000F-
   530 000006D3 000F0000000D001000-
   531 000006DC 10000000           
   532 000006E0 0D001000100000000D-     	dd	0x0010000d,0x10,0x0010000d,0x10,0x0012000e,0x10,0x0011000e,0x10,0x0011000e, 0x11
   533 000006E9 001000100000000E00-
   534 000006F2 1200100000000E0011-
   535 000006FB 00100000000E001100-
   536 00000704 11000000           
   537 00000708 0E001100120000000E-     	dd	0x0011000e,0x12,0x0013000e,0x11,0x0011000f,0x12,0x000e000f,0x12,0x000e000d, 0x0e
   538 00000711 001300110000000F00-
   539 0000071A 1100120000000F000E-
   540 00000723 00120000000D000E00-
   541 0000072C 0E000000           
   542 00000730 0D000F000E0000000D-     	dd	0x000f000d,0x0e,0x000d000d,0x0e,0x000e000d,0x0f,0x0010000d,0x0f,0x0010000d, 0x0f
   543 00000739 000D000E0000000D00-
   544 00000742 0E000F0000000D0010-
   545 0000074B 000F0000000D001000-
   546 00000754 0F000000           
   547 00000758 0D000F00110000000D-     	dd	0x000f000d,0x11,0x0010000d,0x10,0x0010000e,0x10,0x0011000e,0x13,0x0012000e, 0x11
   548 00000761 001000100000000E00-
   549 0000076A 1000100000000E0011-
   550 00000773 00130000000E001200-
   551 0000077C 11000000           
   552 00000780 0E001100110000000F-     	dd	0x0011000e,0x11,0x0013000f,0x11,0x0011000f,0x13,0x0010000e,0x12,0x000e000f, 0x12
   553 00000789 001300110000000F00-
   554 00000792 1100130000000E0010-
   555 0000079B 00120000000F000E00-
   556 000007A4 12000000           
   557 000007A8 0D000B000D0000000D-     	dd	0x000b000d,0x0d,0x000b000d,0x0e,0x000b000d,0x0f,0x000c000d,0x10,0x000c000d, 0x10
   558 000007B1 000B000E0000000D00-
   559 000007BA 0B000F0000000D000C-
   560 000007C3 00100000000D000C00-
   561 000007CC 10000000           
   562 000007D0 0D000D00100000000D-     	dd	0x000d000d,0x10,0x000d000d,0x11,0x000d000e,0x10,0x000e000e,0x11,0x000e000e, 0x11
   563 000007D9 000D00110000000E00-
   564 000007E2 0D00100000000E000E-
   565 000007EB 00110000000E000E00-
   566 000007F4 11000000           
   567 000007F8 0E000E00120000000E-     	dd	0x000e000e,0x12,0x000e000e,0x12,0x000e000f,0x15,0x000e000f,0x14,0x000e000f, 0x15
   568 00000801 000E00120000000F00-
   569 0000080A 0E00150000000F000E-
   570 00000813 00140000000F000E00-
   571 0000081C 15000000           
   572 00000820 0F000C0012000000        	dd	0x000c000f,0x12
   573                                  
   574                                  tableABC
   575 00000828 040002000100000004-     	dd	0x00020004,0x1,0x00040004,0x4,0x00060006,0x7,0x00080008,0x9,0x00090009,0xa,0x000a000a,0xa
   576 00000831 000400040000000600-
   577 0000083A 060007000000080008-
   578 00000843 000900000009000900-
   579 0000084C 0A0000000A000A000A-
   580 00000855 000000             
   581 00000858 0A0009000A0000000A-     	dd	0x0009000a,0xa,0x000a000a,0xb,0x00000000,0x0,0x00020003,0x1,0x00040004,0x4,0x00070006,0x7
   582 00000861 000A000B0000000000-
   583 0000086A 000000000000030002-
   584 00000873 000100000004000400-
   585 0000087C 040000000600070007-
   586 00000885 000000             
   587 00000888 070009000900000009-     	dd	0x00090007,0x9,0x00090009,0x9,0x000a000a,0xa,0x00000000,0x0,0x00040004,0x4,0x00050005,0x6
   588 00000891 000900090000000A00-
   589 0000089A 0A000A000000000000-
   590 000008A3 000000000004000400-
   591 000008AC 040000000500050006-
   592 000008B5 000000             
   593 000008B8 060006000800000007-     	dd	0x00060006,0x8,0x00080007,0x9,0x000a0009,0xa,0x000a0009,0xb,0x0009000a,0xa,0x000a000a,0xa
   594 000008C1 000800090000000900-
   595 000008CA 0A000A00000009000A-
   596 000008D3 000B0000000A000900-
   597 000008DC 0A0000000A000A000A-
   598 000008E5 000000             
   599 000008E8 000000000000000004-     	dd	0x00000000,0x0,0x00040004,0x4,0x00040005,0x6,0x00060006,0x8,0x000a0007,0x9,0x000a0008,0x9
   600 000008F1 000400040000000500-
   601 000008FA 040006000000060006-
   602 00000903 000800000007000A00-
   603 0000090C 0900000008000A0009-
   604 00000915 000000             
   605 00000918 0A000A000A00000000-     	dd	0x000a000a,0xa,0x00000000,0x0,0x00060006,0x7,0x00070006,0x8,0x00080007,0x9,0x00090008,0xa
   606 00000921 000000000000000600-
   607 0000092A 060007000000060007-
   608 00000933 000800000007000800-
   609 0000093C 09000000080009000A-
   610 00000945 000000             
   611 00000948 09000A000B0000000A-     	dd	0x000a0009,0xb,0x000b000a,0xc,0x000a0009,0xb,0x000a000a,0xb,0x00000000,0x0,0x00070005,0x7
   612 00000951 000B000C0000000900-
   613 0000095A 0A000B0000000A000A-
   614 00000963 000B00000000000000-
   615 0000096C 000000000500070007-
   616 00000975 000000             
   617 00000978 060006000700000007-     	dd	0x00060006,0x7,0x00080007,0x9,0x000a0008,0xa,0x000a0009,0xa,0x000b000a,0xb,0x00000000,0x0
   618 00000981 000800090000000800-
   619 0000098A 0A000A00000009000A-
   620 00000993 000A0000000A000B00-
   621 0000099C 0B0000000000000000-
   622 000009A5 000000             
   623 000009A8 070008000800000007-     	dd	0x00080007,0x8,0x00080007,0x9,0x00090008,0xa,0x000b0008,0xb,0x000a0009,0xc,0x000c000a,0xc
   624 000009B1 000800090000000800-
   625 000009BA 09000A00000008000B-
   626 000009C3 000B00000009000A00-
   627 000009CC 0C0000000A000C000C-
   628 000009D5 000000             
   629 000009D8 0A000A000B0000000A-     	dd	0x000a000a,0xb,0x000b000a,0xc,0x00000000,0x0,0x00090007,0x8,0x000a0007,0x9,0x000a0008,0xa
   630 000009E1 000B000C0000000000-
   631 000009EA 000000000000070009-
   632 000009F3 000800000007000A00-
   633 000009FC 0900000008000A000A-
   634 00000A05 000000             
   635 00000A08 09000B000B00000009-     	dd	0x000b0009,0xb,0x000b0009,0xb,0x000c000a,0xb,0x00000000,0x0,0x00090008,0x9,0x000a0008,0xa
   636 00000A11 000B000B0000000A00-
   637 00000A1A 0C000B000000000000-
   638 00000A23 000000000008000900-
   639 00000A2C 0900000008000A000A-
   640 00000A35 000000             
   641 00000A38 09000A000B00000009-     	dd	0x000a0009,0xb,0x000b0009,0xc,0x000b000a,0xc,0x000c000a,0xc,0x000b000a,0xc,0x000c000b,0xc
   642 00000A41 000B000C0000000A00-
   643 00000A4A 0B000C0000000A000C-
   644 00000A53 000C0000000A000B00-
   645 00000A5C 0C0000000B000C000C-
   646 00000A65 000000             
   647 00000A68 000000000000000008-     	dd	0x00000000,0x0,0x00090008,0x8,0x00090008,0x9,0x000a0009,0xa,0x000b0009,0xb,0x000c000a,0xb
   648 00000A71 000900080000000800-
   649 00000A7A 09000900000009000A-
   650 00000A83 000A00000009000B00-
   651 00000A8C 0B0000000A000C000B-
   652 00000A95 000000             
   653 00000A98 0B000C000C00000000-     	dd	0x000c000b,0xc,0x00000000,0x0,0x00090009,0xa,0x000a0009,0xb,0x000b000a,0xc,0x000c000a,0xc
   654 00000AA1 000000000000000900-
   655 00000AAA 09000A00000009000A-
   656 00000AB3 000B0000000A000B00-
   657 00000ABC 0C0000000A000C000C-
   658 00000AC5 000000             
   659 00000AC8 0A000C000D0000000B-     	dd	0x000c000a,0xd,0x000d000b,0xd,0x000c000a,0xc,0x000d000b,0xd,0x00000000,0x0,0x000a0009,0x9
   660 00000AD1 000D000D0000000A00-
   661 00000ADA 0C000C0000000B000D-
   662 00000AE3 000D00000000000000-
   663 00000AEC 0000000009000A0009-
   664 00000AF5 000000             
   665 00000AF8 09000A000A0000000A-     	dd	0x000a0009,0xa,0x000b000a,0xb,0x000b000a,0xc,0x000d000b,0xc,0x000d000b,0xc,0x00000000,0x0
   666 00000B01 000B000B0000000A00-
   667 00000B0A 0B000C0000000B000D-
   668 00000B13 000C0000000B000D00-
   669 00000B1C 0C0000000000000000-
   670 00000B25 000000             
   671 00000B28 090009000900000009-     	dd	0x00090009,0x9,0x00090009,0xa,0x00090009,0xb,0x000a000a,0xc,0x000b000a,0xc,0x000c000b,0xc
   672 00000B31 0009000A0000000900-
   673 00000B3A 09000B0000000A000A-
   674 00000B43 000C0000000A000B00-
   675 00000B4C 0C0000000B000C000C-
   676 00000B55 000000             
   677 00000B58 0B000C000D0000000C-     	dd	0x000c000b,0xd,0x000c000c,0xd,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0
   678 00000B61 000C000D0000000000-
   679 00000B6A 000000000000000000-
   680 00000B73 000000000000000000-
   681 00000B7C 000000000000000000-
   682 00000B85 000000             
   683 00000B88 000000000000000000-     	dd	0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x0009000a,0xa,0x0009000a,0xa
   684 00000B91 000000000000000000-
   685 00000B9A 000000000000000000-
   686 00000BA3 00000000000A000900-
   687 00000BAC 0A0000000A0009000A-
   688 00000BB5 000000             
   689 00000BB8 0A000A000B0000000B-     	dd	0x000a000a,0xb,0x000b000b,0xc,0x000c000b,0xc,0x000c000b,0xd,0x000c000b,0xd,0x000c000c,0xd
   690 00000BC1 000B000C0000000B00-
   691 00000BCA 0C000C0000000B000C-
   692 00000BD3 000D0000000B000C00-
   693 00000BDC 0D0000000C000C000D-
   694 00000BE5 000000             
   695 00000BE8 000000000000000000-     	dd	0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0,0x00000000,0x0
   696 00000BF1 000000000000000000-
   697 00000BFA 000000000000000000-
   698 00000C03 000000000000000000-
   699 00000C0C 000000000000000000-
   700 00000C15 000000             
   701 00000C18 000000000000000000-     	dd	0x0,0x00000000, 0x0,0x00000000
   702 00000C21 00000000000000     
   703                                  
   704                                  linbits32
   705 00000C28 040004000100010004-     	dd	0x00040004,0x10001,0x00040004,0x20002,0x00040004,0x30003,0x00040004,0x40004
   706 00000C31 000400020002000400-
   707 00000C3A 040003000300040004-
   708 00000C43 0004000400         
   709 00000C48 050005000600060006-     	dd	0x00050005,0x60006,0x00060006,0x60006,0x00070007,0x80008,0x00080008,0x80008
   710 00000C51 000600060006000700-
   711 00000C5A 070008000800080008-
   712 00000C63 0008000800         
   713 00000C68 090009000A000A000B-     	dd	0x00090009,0xa000a,0x000b000b,0xa000a,0x000b000b,0xd000d,0x000d000d,0xd000d
   714 00000C71 000B000A000A000B00-
   715 00000C7A 0B000D000D000D000D-
   716 00000C83 000D000D00         
   717 00000C88 0D000D000D000D00        	dd	0x000d000d,0xd000d
   718                                  
   719                                  
   720                                  choose_table_H
   721 00000C90 101811181218131814-     	dw	0x1810, 0x1811, 0x1812, 0x1813, 0x1914, 0x1a14, 0x1b15, 0x1c15
   722 00000C99 19141A151B151C     
   723 00000CA0 161D161E171E171F17-     	dw	0x1d16, 0x1e16, 0x1e17, 0x1f17, 0x1f17
   724 00000CA9 1F                 
   725                                  
   726                                  choose_jump_table_L:
   727 00000CAA 73010000                	dd	table_MMX.L_case_0    - choose_table_MMX
   728 00000CAE 77010000                	dd	table_MMX.L_case_1    - choose_table_MMX
   729 00000CB2 5F020000                	dd	table_MMX.L_case_2    - choose_table_MMX
   730 00000CB6 76020000                	dd	table_MMX.L_case_3    - choose_table_MMX
   731 00000CBA A7010000                	dd	table_MMX.L_case_45   - choose_table_MMX
   732 00000CBE A7010000                	dd	table_MMX.L_case_45   - choose_table_MMX
   733 00000CC2 B7010000                	dd	table_MMX.L_case_67   - choose_table_MMX
   734 00000CC6 B7010000                	dd	table_MMX.L_case_67   - choose_table_MMX
   735 00000CCA C7010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   736 00000CCE C7010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   737 00000CD2 C7010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   738 00000CD6 C7010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   739 00000CDA C7010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   740 00000CDE C7010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   741 00000CE2 C7010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   742 00000CE6 C7010000                	dd	table_MMX.L_case_8_15 - choose_table_MMX
   743                                  
   744                                  	segment_code
   745                                  ;
   746                                  ; use MMX
   747                                  ;
   748                                  
   749                                  PIC_OFFSETTABLE
   750                              <1> extern _GLOBAL_OFFSET_TABLE_
   751                              <1> get_pc.bp:
   752 00000000 8B2C24              <1>  mov ebp, [esp]
   753 00000003 C3                  <1>  retn
   754                                  
   755 00000004 90<rept>                	align	16
   756                                  ; int choose_table(int *ix, int *end, int *s)
   757                                  choose_table_MMX:
   758 00000010 55                      	push	ebp
   759 00000011 E8EAFFFFFF              	call	get_pc.bp
   760 00000016 81C5[EAFFFFFF]          	add	ebp, PIC_BASE()
   761                                  
   762 0000001C 8B4C2408                	mov	ecx,[esp+8]	;ecx = begin
   763 00000020 8B54240C                	mov	edx,[esp+12]	;edx = end
   764 00000024 29D1                    	sub	ecx,edx		;ecx = begin-end(should be minus)
   765 00000026 F7C108000000            	test	ecx,8
   766 0000002C 0FEFC0                   	pxor	mm0,mm0		;mm0=[0:0]
   767 0000002F 0F6F0C0A                	movq	mm1,[edx+ecx]
   768 00000033 740B                    	jz	.lp
   769                                  
   770 00000035 81C108000000            	add	ecx,8
   771 0000003B 7420                    	jz	.exit
   772                                  
   773 0000003D 90<rept>                	align	4
   774                                  .lp:
   775 00000040 0F6F240A                	movq	mm4,[edx+ecx]
   776 00000044 0F6F6C0A08              	movq	mm5,[edx+ecx+8]
   777 00000049 81C110000000            	add	ecx,16
   778 0000004F 0FD9E0                  	psubusw	mm4,mm0	; $BK\Ev$O(B dword $B$G$J$$$H$$$1$J$$$N$@$,(B
   779 00000052 0FD9E9                  	psubusw	mm5,mm1	; $B$=$s$J%3%^%s%I$O$J$$(B :-p
   780 00000055 0FFDC4                  	paddw	mm0,mm4 ; $B$,(B, $B$3$3$G07$&CM$NHO0O$O(B 8191+15 $B0J2<$J$N$GLdBj$J$$(B
   781 00000058 0FFDCD                  	paddw	mm1,mm5
   782 0000005B 75E3                    	jnz	.lp
   783                                  .exit:
   784 0000005D 0FD9C8                  	psubusw	mm1,mm0	; $B$3$l$bK\Ev$O(B dword $B$G$J$$$H$$$1$J$$(B
   785 00000060 0FFDC1                  	paddw	mm0,mm1
   786                                  
   787 00000063 0F6FE0                  	movq	mm4,mm0
   788 00000066 0F6AE4                  	punpckhdq	mm4,mm4
   789 00000069 0FD9E0                  	psubusw	mm4,mm0	; $B$3$l$bK\Ev$O(B dword $B$G$J$$$H$$$1$J$$(B
   790 0000006C 0FFDC4                  	paddw	mm0,mm4
   791 0000006F 0F7EC0                  	movd	eax,mm0
   792                                  
   793 00000072 3D0F000000              	cmp	eax,15
   794 00000077 771E                    	ja	.with_ESC
   795 00000079 8D8D[10000000]          	lea	ecx,[PIC_EBP_REL(choose_table_MMX)]
   796 0000007F 038C85[AA0C0000]        	add	ecx,[PIC_EBP_REL(choose_jump_table_L+eax*4)]
   797 00000086 FFE1                    	jmp 	ecx
   798                                  
   799                                  .with_ESC1:
   800 00000088 0F77                    	emms
   801 0000008A 8B4C2410                	mov	ecx, [esp+16]	; *s
   802 0000008E 8901                    	mov	[ecx], eax
   803 00000090 0DFFFFFFFF              	or	eax,-1
   804 00000095 5D                      	pop	ebp
   805 00000096 C3                      	ret
   806                                  
   807                                  .with_ESC:
   808 00000097 3D0E200000              	cmp	eax, 8191+15
   809 0000009C 77EA                    	ja	.with_ESC1
   810                                  
   811 0000009E 2D0F000000              	sub	eax,15
   812 000000A3 53                      	push	ebx
   813 000000A4 56                      	push	esi
   814 000000A5 0FBDC0                  	bsr	eax, eax
   815                                  %assign _P 4*2
   816 000000A8 0F6FAD[08000000]        	movq    mm5, [PIC_EBP_REL(D15_15_15_15)]
   817 000000AF 0F6FB5[00000000]        	movq	mm6, [PIC_EBP_REL(D14_14_14_14)]
   818 000000B6 0F6F9D[10000000]        	movq	mm3, [PIC_EBP_REL(mul_add)]
   819                                  
   820 000000BD 8B4C2410                	mov	ecx, [esp+_P+8]		; = ix
   821                                  ;	mov	edx, [esp+_P+12]	; = end
   822 000000C1 29D1                    	sub	ecx, edx
   823                                  
   824 000000C3 31F6                    	xor	esi, esi	; sum = 0
   825 000000C5 F7C108000000            	test    ecx, 8
   826 000000CB 0FEFFF                  	pxor	mm7, mm7	; linbits_sum, 14$B$r1[$($?$b$N$N?t(B
   827 000000CE 7428                    	jz	.H_dual_lp1
   828                                  
   829 000000D0 0F6F040A                	movq	mm0, [edx+ecx]
   830 000000D4 81C108000000            	add	ecx,8
   831 000000DA 0F6BC7                  	packssdw	mm0,mm7
   832 000000DD 0F6FD0                  	movq	mm2, mm0
   833 000000E0 0FDDC5                  	paddusw	mm0, mm5	; mm0 = min(ix, 15)+0xfff0
   834 000000E3 0F65D6                  	pcmpgtw	mm2, mm6	; 14$B$h$jBg$-$$$+!)(B
   835 000000E6 0FF9FA                  	psubw	mm7, mm2	; 14$B$h$jBg$-$$$H$-(B linbits_sum++;
   836 000000E9 0FF5C3                  	pmaddwd	mm0, mm3	; {0, 0, y, x}*{1, 16, 1, 16}
   837 000000EC 0F7EC3                  	movd	ebx, mm0
   838 000000EF 8BB49D[40040000]        	mov	esi, [PIC_EBP_REL(largetbl+ebx*4+(16*16+16)*4)]
   839                                  
   840 000000F6 743A                    	jz	.H_dual_exit
   841                                  
   842                                  	align   4
   843                                  .H_dual_lp1:
   844 000000F8 0F6F040A                	movq	mm0, [edx+ecx]
   845 000000FC 0F6F4C0A08              	movq	mm1, [edx+ecx+8]
   846 00000101 0F6BC1                  	packssdw	mm0,mm1
   847 00000104 0F6FD0                  	movq	mm2, mm0
   848 00000107 0FDDC5                  	paddusw	mm0, mm5	; mm0 = min(ix, 15)+0xfff0
   849 0000010A 0F65D6                  	pcmpgtw	mm2, mm6	; 14$B$h$jBg$-$$$+!)(B
   850 0000010D 0FF5C3                  	pmaddwd	mm0, mm3	; {y, x, y, x}*{1, 16, 1, 16}
   851 00000110 0F7EC3                  	movd	ebx, mm0
   852 00000113 0F6AC0                  	punpckhdq	mm0,mm0
   853 00000116 03B49D[40040000]        	add	esi, [PIC_EBP_REL(largetbl+ebx*4+(16*16+16)*4)]
   854 0000011D 0F7EC3                  	movd	ebx, mm0
   855 00000120 03B49D[40040000]        	add	esi, [PIC_EBP_REL(largetbl+ebx*4+(16*16+16)*4)]
   856 00000127 81C110000000            	add	ecx, 16
   857 0000012D 0FF9FA                  	psubw	mm7, mm2	; 14$B$h$jBg$-$$$H$-(B linbits_sum++;
   858 00000130 75C6                    	jnz	.H_dual_lp1
   859                                  
   860                                  .H_dual_exit:
   861 00000132 0F6FCF                  	pmov	mm1,mm7
   862 00000135 0F6AFF                  	punpckhdq	mm7,mm7
   863 00000138 0FFEF9                  	paddd	mm7,mm1
   864 0000013B 0F62FF                  	punpckldq	mm7,mm7
   865                                  
   866 0000013E 0FF5BCC5[280C0000]      	pmaddwd	mm7, [PIC_EBP_REL(linbits32+eax*8)]	; linbits
   867 00000146 668B8445[900C0000]      	mov	ax, [PIC_EBP_REL(choose_table_H+eax*2)]
   868                                  
   869 0000014E 0F7EF9                  	movd	ecx, mm7
   870 00000151 0F6AFF                  	punpckhdq	mm7,mm7
   871 00000154 0F7EFA                  	movd	edx,mm7
   872 00000157 0F77                    	emms
   873 00000159 C1E210                  	shl	edx, 16
   874 0000015C 01D1                    	add	ecx, edx
   875                                  
   876 0000015E 01F1                    	add	ecx, esi
   877                                  
   878 00000160 5E                      	pop	esi
   879 00000161 5B                      	pop	ebx
   880                                  
   881 00000162 89CA                    	mov	edx, ecx
   882 00000164 81E1FFFF0000            	and	ecx, 0xffff	; ecx = sum2
   883 0000016A C1EA10                  	shr	edx, 16	; edx = sum
   884                                  
   885 0000016D 39CA                    	cmp	edx, ecx
   886 0000016F 7E05                    	jle	.chooseE_s1
   887 00000171 89CA                    	mov	edx, ecx
   888 00000173 C1E808                  	shr	eax, 8
   889                                  .chooseE_s1:
   890 00000176 8B4C2410                	mov	ecx, [esp+16] ; *s
   891 0000017A 25FF000000              	and	eax, 0xff
   892 0000017F 0111                    	add	[ecx], edx
   893 00000181 5D                      	pop	ebp
   894 00000182 C3                      	ret
   895                                  
   896                                  table_MMX.L_case_0:
   897 00000183 0F77                    	emms
   898 00000185 5D                      	pop	ebp
   899 00000186 C3                      	ret
   900                                  
   901                                  table_MMX.L_case_1:
   902 00000187 0F77                    	emms
   903 00000189 8B442410                	mov	eax, [esp+16] ; *s
   904 0000018D 8B4C2408                	mov	ecx, [esp+8] ; *ix
   905 00000191 29D1                    	sub	ecx, edx
   906 00000193 53                      	push	ebx
   907                                  .lp:
   908 00000194 8B1C0A                  	mov	ebx, [edx+ecx]
   909 00000197 01DB                    	add	ebx, ebx
   910 00000199 035C0A04                	add	ebx, [edx+ecx+4]
   911 0000019D 0FB69C1D[00000000]      	movzx	ebx, byte [PIC_EBP_REL(ebx+t1l)]
   912 000001A5 0118                    	add	[eax], ebx
   913 000001A7 81C108000000            	add	ecx, 8
   914 000001AD 75E5                    	jnz	.lp
   915 000001AF 5B                      	pop	ebx
   916 000001B0 B801000000              	mov	eax, 1
   917 000001B5 5D                      	pop	ebp
   918 000001B6 C3                      	ret
   919                                  
   920                                  table_MMX.L_case_45:
   921 000001B7 6807000000              	push	dword 7
   922 000001BC 8D8D[70080000]          	lea	ecx, [PIC_EBP_REL(tableABC+9*8)]
   923 000001C2 E91B000000              	jmp	from3
   924                                  
   925                                  table_MMX.L_case_67:
   926 000001C7 680A000000              	push	dword 10
   927 000001CC 8D8D[28080000]          	lea	ecx, [PIC_EBP_REL(tableABC)]
   928 000001D2 E90B000000              	jmp	from3
   929                                  
   930                                  table_MMX.L_case_8_15:
   931 000001D7 680D000000              	push	dword 13
   932 000001DC 8D8D[28000000]          	lea	ecx, [PIC_EBP_REL(tableDEF)]
   933                                  from3:
   934 000001E2 8B44240C                	mov	eax,[esp+12]	;eax = *begin
   935                                  ;	mov	edx,[esp+16]	;edx = *end
   936                                  
   937 000001E6 53                      	push	ebx
   938 000001E7 29D0                    	sub	eax, edx
   939                                  
   940 000001E9 0F6FAD[10000000]        	movq	mm5,[PIC_EBP_REL(mul_add)]
   941 000001F0 0FEFD2                  	pxor	mm2,mm2	;mm2 = sum
   942                                  
   943 000001F3 A908000000              	test	eax, 8
   944 000001F8 741A                    	jz	.choose3_lp1
   945                                  ; odd length
   946 000001FA 0F6F0402                	movq	mm0,[edx+eax]	;mm0 = ix[0] | ix[1]
   947 000001FE 0508000000              	add	eax,8
   948 00000203 0F6BC2                  	packssdw	mm0,mm2
   949                                  
   950 00000206 0FF5C5                  	pmaddwd	mm0,mm5
   951 00000209 0F7EC3                  	movd	ebx,mm0
   952                                  
   953 0000020C 0F6F14D9                	movq	mm2,  [ecx+ebx*8]
   954                                  
   955 00000210 7429                    	jz	.choose3_exit
   956                                  
   957 00000212 90<rept>                	align	4
   958                                  .choose3_lp1
   959 00000214 0F6F0402                	movq	mm0,[edx+eax]
   960 00000218 0F6F4C0208              	movq	mm1,[edx+eax+8]
   961 0000021D 0510000000              	add	eax,16
   962 00000222 0F6BC1                  	packssdw	mm0,mm1 ;mm0 = ix[0]|ix[1]|ix[2]|ix[3]
   963 00000225 0FF5C5                  	pmaddwd	mm0,mm5
   964 00000228 0F7EC3                  	movd	ebx,mm0
   965 0000022B 0F6AC0                  	punpckhdq	mm0,mm0
   966 0000022E 0FFE14D9                	paddd	mm2, [ecx+ebx*8]
   967 00000232 0F7EC3                  	movd	ebx,mm0
   968 00000235 0FFE14D9                	paddd	mm2, [ecx+ebx*8]
   969 00000239 75D9                    	jnz	.choose3_lp1
   970                                  .choose3_exit
   971                                  ;	xor	eax,eax
   972 0000023B 0F7ED3                  	movd	ebx, mm2
   973 0000023E 0F6AD2                  	punpckhdq	mm2,mm2
   974 00000241 89D9                    	mov	ecx, ebx
   975 00000243 81E1FFFF0000            	and	ecx, 0xffff	; ecx = sum2
   976 00000249 C1EB10                  	shr	ebx, 16	; ebx = sum1
   977 0000024C 0F7ED2                  	movd	edx, mm2	; edx = sum
   978                                  
   979 0000024F 39DA                    	cmp	edx, ebx
   980 00000251 7E03                    	jle	.choose3_s1
   981 00000253 89DA                    	mov	edx, ebx
   982 00000255 40                      	inc	eax
   983                                  .choose3_s1:
   984 00000256 0F77                    	emms
   985 00000258 5B                      	pop	ebx
   986 00000259 39CA                    	cmp	edx, ecx
   987 0000025B 7E07                    	jle	.choose3_s2
   988 0000025D 89CA                    	mov	edx, ecx
   989 0000025F B802000000              	mov	eax, 2
   990                                  .choose3_s2:
   991 00000264 59                      	pop	ecx
   992 00000265 01C8                    	add	eax, ecx
   993 00000267 8B4C2410                	mov	ecx, [esp+16] ; *s
   994 0000026B 0111                    	add	[ecx], edx
   995 0000026D 5D                      	pop	ebp
   996 0000026E C3                      	ret
   997                                  
   998                                  table_MMX.L_case_2:
   999 0000026F 6802000000              	push	dword 2
  1000 00000274 8D8D[00000000]          	lea	ecx,[PIC_EBP_REL(table23)]
  1001 0000027A 0F6FAD[18000000]        	pmov	mm5,[PIC_EBP_REL(mul_add23)]
  1002 00000281 E912000000              	jmp	from2
  1003                                  table_MMX.L_case_3:
  1004 00000286 6805000000              	push	dword 5
  1005 0000028B 8D8D[00000000]          	lea	ecx,[PIC_EBP_REL(table56)]
  1006 00000291 0F6FAD[20000000]        	pmov	mm5,[PIC_EBP_REL(mul_add56)]
  1007                                  from2:
  1008 00000298 8B44240C                	mov	eax,[esp+12]	;eax = *begin
  1009                                  ;	mov	edx,[esp+16]	;edx = *end
  1010 0000029C 53                      	push	ebx
  1011 0000029D 57                      	push	edi
  1012                                  
  1013 0000029E 29D0                    	sub	eax, edx
  1014 000002A0 31FF                    	xor	edi, edi
  1015 000002A2 A908000000              	test	eax, 8
  1016 000002A7 741B                    	jz	.choose2_lp1
  1017                                  ; odd length
  1018 000002A9 0F6F0402                	movq	mm0,[edx+eax]	;mm0 = ix[0] | ix[1]
  1019 000002AD 0FEFD2                  	pxor	mm2,mm2		;mm2 = sum
  1020 000002B0 0F6BC2                  	packssdw	mm0,mm2
  1021                                  
  1022 000002B3 0FF5C5                  	pmaddwd	mm0,mm5
  1023 000002B6 0F7EC3                  	movd	ebx,mm0
  1024                                  
  1025 000002B9 8B3C99                  	mov	edi,  [ecx+ebx*4]
  1026                                  
  1027 000002BC 0508000000              	add	eax,8
  1028 000002C1 7426                    	jz	.choose2_exit
  1029                                  
  1030 000002C3 90                      	align	4
  1031                                  .choose2_lp1
  1032 000002C4 0F6F0402                	movq	mm0,[edx+eax]
  1033 000002C8 0F6F4C0208              	movq	mm1,[edx+eax+8]
  1034 000002CD 0F6BC1                  	packssdw	mm0,mm1 ;mm0 = ix[0]|ix[1]|ix[2]|ix[3]
  1035 000002D0 0FF5C5                  	pmaddwd	mm0,mm5
  1036 000002D3 0F7EC3                  	movd	ebx,mm0
  1037 000002D6 0F6AC0                  	punpckhdq	mm0,mm0
  1038 000002D9 033C99                  	add	edi, [ecx+ebx*4]
  1039 000002DC 0F7EC3                  	movd	ebx, mm0
  1040 000002DF 033C99                  	add	edi, [ecx+ebx*4]
  1041 000002E2 0510000000              	add	eax,16
  1042 000002E7 73DB                    	jnc	.choose2_lp1
  1043                                  .choose2_exit
  1044 000002E9 89F9                    	mov	ecx, edi
  1045 000002EB 5F                      	pop	edi
  1046 000002EC 5B                      	pop	ebx
  1047 000002ED 58                      	pop	eax ; table num.
  1048 000002EE 0F77                    	emms
  1049                                  
  1050 000002F0 89CA                    	mov	edx, ecx
  1051 000002F2 81E1FFFF0000            	and	ecx, 0xffff	; ecx = sum2
  1052 000002F8 C1EA10                  	shr	edx, 16	; edx = sum1
  1053                                  
  1054 000002FB 39CA                    	cmp	edx, ecx
  1055 000002FD 7E03                    	jle	.choose2_s1
  1056 000002FF 89CA                    	mov	edx, ecx
  1057 00000301 40                      	inc	eax
  1058                                  .choose2_s1:
  1059 00000302 8B4C2410                	mov	ecx, [esp+16] ; *s
  1060 00000306 0111                    	add	[ecx], edx
  1061 00000308 5D                      	pop	ebp
  1062 00000309 C3                      	ret
  1063                                  
  1064                                  	end
